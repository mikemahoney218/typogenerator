% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods.R
\name{typo_addition}
\alias{typo_addition}
\alias{typo_prefix}
\alias{typo_bitsquat}
\alias{typo_repetition}
\alias{typo_insertion}
\alias{typo_omission}
\alias{typo_vowelswap}
\alias{typo_transposition}
\alias{typo_replace}
\alias{typo_doublehit}
\alias{typo_hyphenation}
\alias{typo_subdomain}
\title{Methods for typo generation}
\usage{
typo_addition(vec, chars = gh_allowed())

typo_prefix(vec, chars = gh_allowed())

typo_bitsquat(vec, chars = gh_allowed())

typo_repetition(vec, chars = NULL)

typo_insertion(vec, chars = gh_allowed())

typo_omission(vec, chars = NULL)

typo_vowelswap(vec, chars = c("a", "e", "i", "o", "u"))

typo_transposition(vec, chars = NULL)

typo_replace(vec, chars = qwerty_neighbors())

typo_doublehit(vec, chars = qwerty_neighbors())

typo_hyphenation(vec, chars = "-")

typo_subdomain(vec, chars = ".")
}
\arguments{
\item{vec}{A vector of strings to attempt to generate typos for.}

\item{chars}{Characters to use in generating typos. Takes one of three
formats:
\itemize{
\item For \code{typo_doublehit} and \code{typo_replace}, a named list (such as the one
returned by \link{qwerty_neighbors}) where the names of the list represent
individual characters and the elements of the list are characters to
append or replace.
\item For \code{typo_addition}, \code{typo_prefix}, \code{typo_bitsquat}, \code{typo_insertion},
and \code{typo_vowelswap}, a vector of acceptable characters to add, swap, or
insert.
\item For \code{typo_repetition}, \code{typo_omission}, and \code{typo_transposition},
this argument is ignored.
}}
}
\value{
A list of length \code{length(vec)} using \code{vec} as names, with each
element of the list containing a character vector of potential typos.
}
\description{
These functions implement various strategies to generate variants of strings.
This is a partial implementation of Normand (2020); some variants are not
implemented due to being out of scope (such as homoglyph typos, which this
package does not intend to exhaustively cover). All typo permutations are
returned in lowercase, and case differences are not considered typos.
}
\section{Methods Implemented}{


At the moment 12 methods are implemented.
\itemize{
\item \code{typo_addition} adds characters to the end of a string.
\item \code{typo_prefix} adds characters to the start of a string.
\item \code{typo_bitsquat} changes a single character at a time, moving through the
length of the string (so that each permutation is one bit different from
the original input).
\item \code{typo_repetition} repeats a single character to simulate pressing a key
twice.
\item \code{typo_insertion} inserts a single character into each position in the
string. \code{typo_hyphenation} is equivalent to
\code{typo_insertion(vec, chars = "-")} and \code{typo_subdomain} is equivalent to
\code{typo_insertion(vec, chars = ".")}.
\item \code{typo_omission} removes a single character from the string.
\item \code{typo_vowelswap} replaces the vowels in the string with the other vowels.
Values provided to \code{chars} are used to define the full set of vowels;
by default, \code{y} is not considered to be a vowel.
\item \code{typo_transposition} swaps adjacent characters throughout the string.
\item \code{typo_replace} replaces a single character with a set of characters (such
as those close to the key on a keyboard).
\item \code{typo_doublehit} is similar to \code{typo_replace} but inserts the wrong
character rather than replacing with it (to simulate hitting two keys at
once).
}
}

\examples{
typo_bitsquat("Michael")

typo_replace(c("Michael", "David"))

}
\references{
Thibault Normand (2020). Typogenerator: a typosquatting generator in Golang.
Golang package version 0.2.0. \url{https://github.com/zntrio/typogenerator}
}
